{"version":3,"sources":["components/Webcam/Webcam.module.css","components/Copy/Copy.module.css","components/Canvas/Canvas.module.css","components/Webcam/index.js","components/Copy/index.js","components/Particles/index.js","components/Canvas/index.js","components/City/index.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Webcam","videoRef","useRef","useEffect","a","navigator","mediaDevices","getUserMedia","video","audio","stream","current","srcObject","load","className","styles","webcam","ref","autoPlay","Copy","city","next","copy","onClick","name","Particle","particle","mesh","useFrame","state","delta","rotation","x","y","position","Math","cos","clock","getElapsedTime","key","sin","z","args","size","color","opacity","trasparent","Particles","particles","map","ThreeCanvas","count","i","push","random","getParticles","canvas","City","id","Canvas","cities","App","useState","index","setIndex","prev","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd7a726f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"webcam\":\"Webcam_webcam__5zdMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"copy\":\"Copy_copy__1huym\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Canvas_canvas__1txVP\"};","import React, { useRef, useEffect } from 'react'\n\nimport styles from \"./Webcam.module.css\";\n\nfunction Webcam() {\n  const videoRef = useRef();\n  useEffect(() => {\n    const load = async () => {\n      if (navigator.mediaDevices) {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });\n        videoRef.current.srcObject = stream;\n      }\n    };\n    load();\n  }, []);\n  return (\n    <video className={styles.webcam} ref={videoRef} autoPlay={true}></video>\n  )\n}\n\nexport default Webcam;","import React from 'react'\n\nimport styles from \"./Copy.module.css\";\n\nfunction Copy({ city, next }) {\n  return (\n    <div className={styles.copy}>\n      <button onClick={next}>discover</button>\n      <h1>{city.name}</h1>\n    </div>\n  )\n}\n\nexport default Copy;","import React, { useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\n\nfunction Particle({ particle }) {\n  const mesh = useRef()\n\n  useFrame((state, delta) => {\n    if (!mesh.current) return;\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    mesh.current.position.x += Math.cos( state.clock.getElapsedTime() + particle.key ) * 0.01;\n    mesh.current.position.y += Math.sin( state.clock.getElapsedTime() * 1.1 + particle.key ) * 0.01;\n  })\n\n  return (\n    <mesh\n      position={[particle.x, particle.y, particle.z]}\n      ref={mesh}>\n      <sphereBufferGeometry args={[particle.size, 32, 32]} />\n      <meshStandardMaterial color={'#222'} opacity={0.6} trasparent />\n    </mesh>\n  )\n}\n\nfunction Particles({ particles = [] }) {\n  return (\n    <group>\n      {particles.map(particle => <Particle key={particle.key} particle={particle} />)}\n    </group>\n  )\n}\n\nexport default Particles;","import React from 'react'\nimport { Canvas } from 'react-three-fiber'\n\nimport Particles from '../Particles';\n\nimport styles from \"./Canvas.module.css\";\n\nconst getParticles = (count) => {\n  const particles = [];\n  for (let i = 0; i < count; i += 1) {\n    particles.push({\n      key: i,\n      size: Math.random() * 0.1 + 0.1,\n      x: Math.random() * 10 - 5,\n      y: Math.random() * 10 - 5,\n      z: Math.random() * 1 - 2,\n    });\n  }\n  return particles;\n};\n\nfunction ThreeCanvas({ city }) {\n  const particles = getParticles(city.particles);\n  return (\n    <div className={styles.canvas}>\n      <Canvas>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <Particles particles={particles} />\n      </Canvas>\n    </div>\n  )\n}\n\nexport default ThreeCanvas;","import Webcam from '../Webcam';\nimport Copy from '../Copy';\nimport Canvas from '../Canvas';\n\nfunction City({ city, next, webcam = true }) {\n  return (\n    <div id=\"app\">\n      {webcam && <Webcam />}\n      <Canvas city={city} />\n      <Copy city={city} next={next} />\n    </div>\n  );\n}\n\nexport default City;\n","import React, { useState } from 'react';\n\nimport City from './components/City';\n\nconst cities = [\n  { name: 'Brescia', particles: 30 },\n  { name: 'Mumbai', particles: 500 },\n];\n\nfunction App() {\n  const [index, setIndex] = useState(0);\n  const next = () => {\n      setIndex(prev => prev === cities.length - 1 ? 0 : prev + 1);\n  };\n  const city = cities[index];\n  const webcam = true;\n  return (\n    <div id=\"app\">\n      <City city={city} next={next} webcam={webcam} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}